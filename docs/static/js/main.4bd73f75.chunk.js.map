{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGift.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","placeholder","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gift","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGift","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAkB1C,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAY,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAOlB,SACI,uBACAO,YAAY,cACVC,KAAK,OACLC,MAAOV,EACPW,SArBgB,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARtB,kBAWZM,GAXY,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,2CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EAGZf,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAL0B,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAuBtC,OAfAC,qBAAU,WAENxB,EAASC,GACRwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIlB,CAACpB,IAIIqB,EDnBuBK,CAAa1B,GAAhCa,EAHyB,EAG9BN,KAAaa,EAHiB,EAGjBA,QAEnB,OACA,eAAC,WAAD,WAEI,oBAAIJ,UAAU,sCAAd,SAAqDhB,IAGpDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEX,qBAAKA,UAAU,YAAf,SAEWH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEUlBgB,EAzBM,WAAO,IAAD,EAGW1C,mBAAS,CAAC,cAAe,mBAHpC,mBAGhB2C,EAHgB,KAGJ5C,EAHI,KAKvB,OACI,eAAC,WAAD,WAGI,8CACA,cAAC,EAAD,CAAcA,YAAaA,IAC3B,uBACA,6BAEQ4C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YClB7B6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4bd73f75.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategory}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length >2){\r\n            setCategory(categ => [inputValue, ...categ,]);\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n    \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            placeholder=\"Buscar Gift\"\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategory: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGift = async ( category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=IXEhHI99Jne61nX7eYGAybc7RCd5OhL5&q=${encodeURI(category)}&limit=10`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gift = data.map(img=>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gift;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGift } from '../hooks/useFetchGift'\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nexport const GifGrid =  ({category}) => {\r\n\r\n    //Cuando esta el : es para combiar el nombre de los usestate\r\n   const {data:images, loading} = useFetchGift(category);\r\n\r\n    return (\r\n    <Fragment>\r\n\r\n        <h3 className=\"animate__animated animate__fadeInUp\">{category}</h3>\r\n        \r\n        {/* cuando se utiliza el && es cuando por defecto se retornada un null */}\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n         <div className=\"card-grid\">  \r\n                {\r\n                    images.map( img =>(\r\n                        \r\n                        <GifGridItem\r\n                        key={img.id} \r\n                        { ...img }\r\n                        \r\n                        />\r\n                    ))    \r\n                } \r\n        </div> \r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGift} from '../helpers/getGifs'\r\n\r\nexport const useFetchGift = (category) => {\r\n  \r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        getGift( category )\r\n        .then(imgs =>{\r\n\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n        })\r\n\r\n    },[category])\r\n\r\n\r\n\r\n    return state;\r\n\r\n\r\n}\r\n\r\n","import React, {\r\n    Fragment, useState\r\n} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategory] = useState(['Final Space', 'Rick and Morty']);\r\n\r\n    return(\r\n        <Fragment>\r\n            \r\n\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory  setCategory={setCategory}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map( category =>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}\r\n                        />  \r\n                    ))\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}